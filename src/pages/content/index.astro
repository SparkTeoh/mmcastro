---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/UI/Navigation.astro';
import Footer from '../../components/UI/Footer.astro';
import fs from 'fs';
import path from 'path';

// 获取搜索参数
const searchQuery = Astro.url.searchParams.get('search') || '';
const pageParam = Astro.url.searchParams.get('page');
const page = pageParam ? parseInt(pageParam) : 1;
const itemsPerPage = 9; // 每页显示9个内容

// 获取所有 Astro 内容文件
const contentFilesPath = path.join(process.cwd(), 'src/pages/content');
let allContentArticles = [];

try {
  if (fs.existsSync(contentFilesPath)) {
    const contentFiles = fs.readdirSync(contentFilesPath, { withFileTypes: true })
      .filter(dirent => dirent.isFile() && dirent.name.endsWith('.astro') && dirent.name !== 'index.astro' && dirent.name !== '[slug].astro')
      .map(dirent => dirent.name);
    
    allContentArticles = contentFiles.map(file => {
      const filePath = path.join(contentFilesPath, file);
      const fileContent = fs.readFileSync(filePath, 'utf-8');
      
      // 提取 frontmatter 中的 contentData
      const frontmatterMatch = fileContent.match(/---([\s\S]*?)---/);
      if (frontmatterMatch) {
        const frontmatter = frontmatterMatch[1];
        
        // 提取 contentData 对象
        const contentDataMatch = frontmatter.match(/const contentData = \{([\s\S]*?)\};/);
        if (contentDataMatch) {
          try {
            // 构建一个可解析的 JavaScript 对象字符串
            const contentDataStr = contentDataMatch[0]
              .replace('const contentData = ', '')
              .replace(/;$/, '')
              .replace(/new Date\('([^']+)'\)/g, '"$1"') // 将 new Date() 转换为字符串
              .replace(/new Date\(\)/g, `"${new Date().toISOString()}"`);
            
            // 使用 eval 来解析对象（注意：这在生产环境中需要谨慎使用）
            const contentData = eval('(' + contentDataStr + ')');
            
            return {
              ...contentData,
              isAstro: true,
              link: `/content/${file.replace('.astro', '')}`,
              contentType: 'astro',
              isExternal: false,
              description: contentData.summary,
              pubDate: new Date(contentData.pubDate)
            };
          } catch (error) {
            console.warn(`Error parsing contentData from ${file}:`, error);
            return null;
          }
        }
      }
      
      // 如果没有找到 contentData，返回默认数据
      return {
        title: file.replace('.astro', '').replace(/-/g, ' '),
        summary: 'MMC 内容文章',
        author: 'MMC Financial',
        pubDate: new Date(),
        tags: ['MMC', '财务'],
        type: '专业内容',
        isAstro: true,
        link: `/content/${file.replace('.astro', '')}`,
        contentType: 'astro',
        isExternal: false,
        featured: false
      };
    }).filter(Boolean); // 过滤掉 null 值
  }
} catch (error) {
  console.warn('Error reading content files:', error);
  allContentArticles = [];
}

// 按日期排序，最新的在前面
const allContent = allContentArticles.sort((a, b) => {
  const dateA = a.pubDate ? new Date(a.pubDate).valueOf() : 0;
  const dateB = b.pubDate ? new Date(b.pubDate).valueOf() : 0;
  return dateB - dateA;
});

// 搜索过滤
let filteredContent;
if (searchQuery && searchQuery.trim() !== '') {
  filteredContent = allContent.filter(item => {
    const query = searchQuery.toLowerCase().trim();
    const titleMatch = item.title.toLowerCase().includes(query);
    const summaryMatch = item.summary && item.summary.toLowerCase().includes(query);
    const descriptionMatch = item.description && item.description.toLowerCase().includes(query);
    const tagMatch = item.tags && item.tags.some((tag: string) => tag.toLowerCase().includes(query));
    
    return titleMatch || summaryMatch || descriptionMatch || tagMatch;
  });
} else {
  filteredContent = allContent;
}

// 分页
const totalPages = Math.ceil(filteredContent.length / itemsPerPage);
const startIndex = (page - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedContent = filteredContent.slice(startIndex, endIndex);

// 获取所有标签用于筛选
const allTags = [...new Set(allContent.flatMap(item => item.tags || []))];
---

<Layout title="内容中心 - MMC Financial">
  <Navigation />
  
  <main class="min-h-screen bg-gradient-to-br from-theme-light to-white pt-20">
    <!-- 页面标题和搜索区域 -->
    <section class="py-12 px-4 mx-auto container">
      <div class="mx-auto max-w-screen-sm text-center lg:mb-16 mb-8">
        <h1 class="mb-4 text-4xl lg:text-5xl tracking-tight font-extrabold text-primary">📚 内容中心</h1>
        <p class="font-light sm:text-xl text-text-default">探索我们的专业财务内容，获取深度见解和实用知识</p>
      </div>

      <!-- 搜索和筛选区域 -->
      <div class="mb-8">
        <form method="GET" action="/content" class="flex flex-col sm:flex-row gap-4 max-w-2xl mx-auto">
          <div class="flex-1 relative">
            <input 
              type="text" 
              name="search" 
              value={searchQuery}
              placeholder="搜索文章标题、内容或标签..." 
              class="w-full px-4 py-3 pl-12 border border-border-default rounded-xl focus:ring-2 focus:ring-accent focus:border-transparent"
            >
            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <button type="submit" class="px-6 py-3 bg-accent hover:bg-accent/90 text-white font-medium rounded-xl transition-colors duration-200">
            搜索
          </button>
          {searchQuery && (
            <a href="/content" class="px-6 py-3 bg-gray-200 hover:bg-gray-300 text-text-default font-medium rounded-xl transition-colors duration-200">
              清除
            </a>
          )}
        </form>
      </div>

      <!-- 搜索结果统计 -->
      {searchQuery && (
        <div class="text-center mb-6">
          <div class="bg-accent/10 border border-accent/20 rounded-xl p-4 mb-4">
            <p class="text-text-default">
              🔍 搜索 "<span class="font-bold text-accent">{searchQuery}</span>" 
              找到 <span class="font-bold text-accent">{filteredContent.length}</span> 个结果
              {filteredContent.length !== allContent.length && (
                <span class="text-gray-500">（共 {allContent.length} 个内容）</span>
              )}
            </p>
            {filteredContent.length === 0 && (
              <p class="text-gray-500 mt-2">
                没有找到相关内容，请尝试其他关键词
              </p>
            )}
          </div>
        </div>
      )}

      <!-- 标签筛选 -->
      <div class="mb-8">
        <div class="flex flex-wrap gap-2 justify-center">
          {allTags.slice(0, 10).map((tag: string) => (
            <a 
              href={`/content?search=${encodeURIComponent(tag)}`}
              class="px-3 py-1 bg-white hover:bg-accent hover:text-white text-text-default text-sm font-medium rounded-full border border-border-default transition-colors duration-200"
            >
              {tag}
            </a>
          ))}
        </div>
      </div>
    </section>

    <!-- 内容网格 -->
    <section class="px-4 mx-auto container pb-12">
      {filteredContent.length > 0 ? (
        <div id="content-grid" class="grid gap-8 lg:grid-cols-2 xl:grid-cols-3">
          {paginatedContent.map(item => (
            <article class="p-6 bg-white rounded-[45px] hover:shadow-lg transition-all duration-300 hover:scale-105 border border-border-default">
              <div class="flex items-center justify-between mb-4">
                <span class="text-white text-xs font-medium px-3 py-1 rounded-full bg-accent">
                  {item.type} • 专业内容
                </span>
                {item.featured && (
                  <span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-2 py-1 rounded-full">
                    推荐
                  </span>
                )}
              </div>
              
              <h3 class="mb-3 text-xl font-bold tracking-tight text-primary hover:text-accent transition-colors">
                <a href={item.link} target={item.isExternal ? "_blank" : undefined} rel={item.isExternal ? "noopener noreferrer" : undefined}>{item.title}</a>
              </h3>
              
              <p class="mb-4 text-text-default line-clamp-3">{item.summary || item.description}</p>
              
              <div class="flex flex-wrap gap-2 mb-4">
                {(item.tags || []).slice(0, 3).map((tag: string) => (
                  <span class="bg-gray-100 text-primary text-xs font-medium px-2 py-1 rounded">
                    {tag}
                  </span>
                ))}
              </div>
              
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-8 rounded-full bg-accent flex items-center justify-center">
                    <span class="text-white text-sm font-bold">{item.author.charAt(0)}</span>
                  </div>
                  <div class="text-sm">
                    <p class="text-primary font-medium">{item.author}</p>
                    <p class="text-text-default">{new Date(item.pubDate).toLocaleDateString('zh-CN')}</p>
                  </div>
                </div>
                <a href={item.link} target={item.isExternal ? "_blank" : undefined} rel={item.isExternal ? "noopener noreferrer" : undefined} class="inline-flex items-center font-medium text-primary hover:text-accent transition-colors">
                  阅读全文
                  <svg class="ml-2 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </a>
              </div>
            </article>
          ))}
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="mb-4">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">没有找到相关内容</h3>
          <p class="text-gray-500 mb-4">尝试使用不同的关键词搜索，或者浏览所有内容</p>
          <a href="/content" class="inline-flex items-center px-4 py-2 bg-accent hover:bg-accent/90 text-white font-medium rounded-lg transition-colors duration-200">
            查看所有内容
          </a>
        </div>
      )}

      <!-- 加载更多按钮 -->
      {page < totalPages && (
        <div id="load-more-container" class="mt-12 flex justify-center">
          <button id="load-more" class="px-8 py-4 bg-accent hover:bg-accent/90 text-white font-bold rounded-xl transition-all duration-300 transform hover:scale-105">
            加载更多
          </button>
        </div>
      )}
    </section>
  </main>

  <Footer />
</Layout>

<script is:inline define:vars={{ totalPages, initialPage: page }}>
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreButton = document.getElementById('load-more');
    const contentGrid = document.getElementById('content-grid');
    let currentPage = initialPage;

    if (currentPage >= totalPages) {
      if (loadMoreButton) {
        const container = document.getElementById('load-more-container');
        if(container) container.style.display = 'none';
      }
    }

    if (loadMoreButton) {
      loadMoreButton.addEventListener('click', async () => {
        if (currentPage >= totalPages) return;

        currentPage++;
        loadMoreButton.textContent = '正在加载...';
        loadMoreButton.disabled = true;

        try {
          const response = await fetch(`/api/content?page=${currentPage}`);
          const data = await response.json();

          data.posts.forEach(item => {
            const article = document.createElement('article');
            article.className = 'p-6 bg-white rounded-[45px] hover:shadow-lg transition-all duration-300 hover:scale-105 border border-border-default';
            
            const target = item.isExternal ? '_blank' : '_self';
            const rel = item.isExternal ? 'noopener noreferrer' : undefined;

            article.innerHTML = `
              <div class="flex items-center justify-between mb-4">
                <span class="text-white text-xs font-medium px-3 py-1 rounded-full bg-accent">
                  ${item.type} • 专业内容
                </span>
              </div>
              <h3 class="mb-3 text-xl font-bold tracking-tight text-primary hover:text-accent transition-colors">
                <a href="${item.url}" target="${target}" ${rel ? `rel="${rel}"` : ''}>${item.title}</a>
              </h3>
              <p class="mb-4 text-text-default line-clamp-3">${item.description || item.summary}</p>
              <div class="flex flex-wrap gap-2 mb-4">
                ${(item.tags || []).slice(0, 3).map(tag => `<span class="bg-gray-100 text-primary text-xs font-medium px-2 py-1 rounded">${tag}</span>`).join('')}
              </div>
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-8 rounded-full bg-accent flex items-center justify-center">
                    <span class="text-white text-sm font-bold">${item.author.charAt(0)}</span>
                  </div>
                  <div class="text-sm">
                    <p class="text-primary font-medium">${item.author}</p>
                    <p class="text-text-default">${new Date(item.pubDate).toLocaleDateString('zh-CN')}</p>
                  </div>
                </div>
                <a href="${item.url}" target="${target}" ${rel ? `rel="${rel}"` : ''} class="inline-flex items-center font-medium text-primary hover:text-accent transition-colors">
                  阅读全文
                  <svg class="ml-2 w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                </a>
              </div>
            `;
            
            contentGrid.appendChild(article);
          });

          if (currentPage >= data.totalPages) {
            const container = document.getElementById('load-more-container');
            if(container) container.style.display = 'none';
          } else {
            loadMoreButton.textContent = '加载更多';
            loadMoreButton.disabled = false;
          }
        } catch (error) {
          console.error('加载更多内容失败:', error);
          loadMoreButton.textContent = '加载失败，请重试';
          loadMoreButton.disabled = false;
        }
      });
    }
  });
</script>
