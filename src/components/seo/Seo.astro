---
// SEO component for MMC Astro
// Based on SparkAstro's SEO component structure

type Props = {
  // Pass title and description for internal pages
  // If not given, this defaults to site data
  // Url is automatic
  // Robots are optional
  // Frontmatter triggers a CMS post type
  title: string;
  description: string;
  url: string;
  image?: { src: string; alt: string };
  robots?: boolean;
  frontmatter?: any;
};

const {
  title,
  description,
  url = Astro.url,
  image,
  frontmatter,
  robots,
} = Astro.props;

// Default site data for MMC
const siteData = {
  name: "MMC Financial Planning",
  description: "专业利润预算管理解决方案，帮助企业实现收入利润双增长",
  image: {
    src: "/images/MMCFavicon.png",
    alt: "MMC Financial Planning Logo"
  }
};

// Generate JSON-LD for structured data
const generateJsonLD = (type: string, post?: any, url?: string) => {
  const baseJsonLD = {
    "@context": "https://schema.org",
    "@type": type === "post" ? "Article" : "WebSite",
    "name": siteData.name,
    "description": siteData.description,
    "url": url || Astro.url,
  };

  if (type === "post" && post) {
    return {
      ...baseJsonLD,
      "@type": "Article",
      "headline": post.title,
      "description": post.description,
      "author": {
        "@type": "Organization",
        "name": "MMC Financial Planning"
      },
      "publisher": {
        "@type": "Organization",
        "name": "MMC Financial Planning",
        "logo": {
          "@type": "ImageObject",
          "url": siteData.image.src
        }
      },
      "datePublished": post.pubDate,
      "dateModified": post.pubDate
    };
  }

  return baseJsonLD;
};

const jsonLD = generateJsonLD(
  frontmatter ? "post" : "website",
  frontmatter,
  url
);
---

<!-- SEO -->
<link rel="canonical" href={url} />

<!-- Open Graph -->
<meta property="og:site_name" content={siteData.name} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={url} />
<meta property="og:image" content={image?.src || siteData.image.src} />
<meta property="og:image:url" content={image?.src || siteData.image.src} />
<meta
  property="og:image:secure_url"
  content={image?.src || siteData.image.src}
/>
<meta property="og:image:type" content="image/png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="600" />
<meta property="og:image:alt" content={image?.alt || siteData.image.alt} />

<!-- Twitter -->
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:image" content={image?.src || siteData.image.src} />
<meta name="twitter:image:alt" content={title} />

<!-- Using environment domain -->
<meta name="twitter:domain" content={import.meta.env.SITE?.toString()} />

{robots && <meta name="robots" content="noindex, nofollow" />}

<!-- JSON LD -->
<Fragment set:html={JSON.stringify(jsonLD)} />
